广工的图书馆查询ISBN号必须添加连字符，而豆瓣的结果不带连字符。

广工的图书馆可能收录的是ISBN10或者ISBN13。所以需要进行两个查询。

可以认为广工图书馆只收录中国出版社的书，所以国家代码固定为7。

可以预期豆瓣的前几个结果的ISBN在广工图书馆命中几率比较小，以java为例的搜索结果，虽然同名书在广工图书馆存在，但是ISBN号不一致。

同一本书可能有两个不同的版本，它们的ISBN号是不一样的，而且在豆瓣的评价也是差别挺大的，比较新的版本可能没有什么评价。
>疯狂Java讲义 [专著]</a></span>","author":"李刚编著","public":"电子工业出版社","year":"2012","index":"TP312JA/L310.1-4(2)" 978-7-121-15578-9
>疯狂Java讲义 [专著]</a></span>","author":"李刚编著","public":"电子工业出版社","year":"2008","index":"TP312JA/L310.1-4" 978-7-121-06646-7

两本书是一样的书吗？匹配算法：
1.题名匹配： 去掉双方结果中的空格以及"[...]"（广工图书馆中会有"[专著]"这样的后缀），然后转为大写后进行全匹配。
2.著者匹配： 
3.出版社匹配： 去掉"豆瓣

很多书都起了一个中规中矩的名字，例如"Java 语言程序设计"，所以不进行ISBN号匹配，还是不行的。但是有可能对新书"错杀"，以"疯狂Java 讲义“
为例，它在图书馆中的新版本在豆瓣中的评价很少。

一本书可能有不同的版本，而且名字都还不一样：
Java编程思想 [专著]：评注版＝Thinking in Java
Java编程思想 [专著]＝Thinking in Java
Java编程思想 [中译文]
Thinking in Java [monograph]＝Java编程思想
Java编程思想 [专著]：第二版
Thinking in Java [monograph]＝Java编程思想：Second edition

从豆瓣得到的书的题名： Java编程思想 （第4版）是否也要进行一定的处理?因为可能图书馆在录入的时候没有录入版本作为题名的一部分，
不代表没有，这样就有一个问题，书的版本的重要性如何？

使用的匹配算法：
先使用keyword搜索豆瓣，然后依照豆瓣的结果列表，对每一项按照title在广工中搜索"题名前方一致"的图书，由于可能有重复项，
将所有这些结果先进行过滤：，
然后再合并，得到一个新的列表， 对每一项按照索引号（广工的一级检索结果没有提供ISBN号）在广工中搜索得到ISBN号，
然后再根据ISBN号在豆瓣中搜索，获取每一本书的包括评价的详细信息，然后按照评价进行排序， 作为返回结果。
node.js的并发http请求的时间是如何计算的？响应时间在多少以内能够接受？

TODO：现在的搜索结果只是返回一部分。

TODO：测试以标题还是作者搜索图书馆快。

TEST
.input: "Java语言程序设计"。
 result: Java语言程序设计 梁 / 王镁 / 机械工业出版社